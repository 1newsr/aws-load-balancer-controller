https://github.com/kubernetes/kubernetes/issues/24145

https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx

https://github.com/kubernetes/ingress

https://github.com/kubernetes/ingress/pull/214/files
https://github.com/mholt/caddy

http://containerops.org/2017/01/30/kubernetes-services-and-ingress-under-x-ray/

OnUpdate updatePayload:
(ingress.Configuration) {
 Backends: ([]*ingress.Backend) (len=3 cap=3) {
  (*ingress.Backend)(0xc4201762d0)({
   Name: (string) (len=25) "2048-game-service-2048-80",
   Secure: (bool) false,
   Endpoints: ([]ingress.Endpoint) (len=5 cap=5) {
    (ingress.Endpoint) {
     Address: (string) (len=13) "10.233.100.12",
     Port: (string) (len=2) "80",
     MaxFails: (int) 0,
     FailTimeout: (int) 0
    },
    (ingress.Endpoint) {
     Address: (string) (len=13) "10.233.100.13",
     Port: (string) (len=2) "80",
     MaxFails: (int) 0,
     FailTimeout: (int) 0
    },
    (ingress.Endpoint) {
     Address: (string) (len=12) "10.233.106.6",
     Port: (string) (len=2) "80",
     MaxFails: (int) 0,
     FailTimeout: (int) 0
    },
    (ingress.Endpoint) {
     Address: (string) (len=13) "10.233.70.132",
     Port: (string) (len=2) "80",
     MaxFails: (int) 0,
     FailTimeout: (int) 0
    },
    (ingress.Endpoint) {
     Address: (string) (len=13) "10.233.70.134",
     Port: (string) (len=2) "80",
     MaxFails: (int) 0,
     FailTimeout: (int) 0
    }
   }
  }),
  (*ingress.Backend)(0xc420176210)({
   Name: (string) (len=24) "echoserver-echoserver-80",
   Secure: (bool) false,
   Endpoints: ([]ingress.Endpoint) (len=1 cap=1) {
    (ingress.Endpoint) {
     Address: (string) (len=13) "10.233.106.11",
     Port: (string) (len=4) "8080",
     MaxFails: (int) 0,
     FailTimeout: (int) 0
    }
   }
  }),
  (*ingress.Backend)(0xc420176180)({
   Name: (string) (len=24) "upstream-default-backend",
   Secure: (bool) false,
   Endpoints: ([]ingress.Endpoint) (len=1 cap=1) {
    (ingress.Endpoint) {
     Address: (string) (len=12) "10.233.106.3",
     Port: (string) (len=4) "8080",
     MaxFails: (int) 0,
     FailTimeout: (int) 0
    }
   }
  })
 },
 Servers: ([]*ingress.Server) (len=3 cap=3) {
  (*ingress.Server)(0xc420207180)({
   Hostname: (string) (len=1) "_",
   SSLPassthrough: (bool) false,
   SSLCertificate: (string) (len=56) "/ingress-controller/ssl/system-snake-oil-certificate.pem",
   SSLPemChecksum: (string) (len=40) "146ba50f54c64f26b113164c0f2a7e62685a12ce",
   Locations: ([]*ingress.Location) (len=1 cap=1) {
    (*ingress.Location)(0xc420334380)({
     Path: (string) (len=1) "/",
     IsDefBackend: (bool) true,
     Backend: (string) (len=24) "upstream-default-backend",
     BasicDigestAuth: (auth.BasicDigest) {
      Type: (string) "",
      Realm: (string) "",
      File: (string) "",
      Secured: (bool) false
     },
     Denied: (error) <nil>,
     EnableCORS: (bool) false,
     ExternalAuth: (authreq.External) {
      URL: (string) "",
      Method: (string) "",
      SendBody: (bool) false
     },
     RateLimit: (ratelimit.RateLimit) {
      Connections: (ratelimit.Zone) {
       Name: (string) "",
       Limit: (int) 0,
       Burst: (int) 0,
       SharedSize: (int) 0
      },
      RPS: (ratelimit.Zone) {
       Name: (string) "",
       Limit: (int) 0,
       Burst: (int) 0,
       SharedSize: (int) 0
      }
     },
     Redirect: (rewrite.Redirect) {
      Target: (string) "",
      AddBaseURL: (bool) false,
      SSLRedirect: (bool) false
     },
     Whitelist: (ipwhitelist.SourceRange) {
      CIDR: ([]string) <nil>
     },
     Proxy: (proxy.Configuration) {
      BodySize: (string) "",
      ConnectTimeout: (int) 0,
      SendTimeout: (int) 0,
      ReadTimeout: (int) 0,
      BufferSize: (string) ""
     },
     CertificateAuth: (resolver.AuthSSLCert) {
      Secret: (string) "",
      CertFileName: (string) "",
      KeyFileName: (string) "",
      CAFileName: (string) "",
      PemSHA: (string) ""
     },
     UsePortInRedirects: (bool) false
    })
   }
  }),
  (*ingress.Server)(0xc420207220)({
   Hostname: (string) (len=13) "2048.tmaws.io",
   SSLPassthrough: (bool) false,
   SSLCertificate: (string) "",
   SSLPemChecksum: (string) "",
   Locations: ([]*ingress.Location) (len=1 cap=1) {
    (*ingress.Location)(0xc420334700)({
     Path: (string) (len=1) "/",
     IsDefBackend: (bool) false,
     Backend: (string) (len=25) "2048-game-service-2048-80",
     BasicDigestAuth: (auth.BasicDigest) {
      Type: (string) "",
      Realm: (string) "",
      File: (string) "",
      Secured: (bool) false
     },
     Denied: (error) <nil>,
     EnableCORS: (bool) false,
     ExternalAuth: (authreq.External) {
      URL: (string) "",
      Method: (string) "",
      SendBody: (bool) false
     },
     RateLimit: (ratelimit.RateLimit) {
      Connections: (ratelimit.Zone) {
       Name: (string) "",
       Limit: (int) 0,
       Burst: (int) 0,
       SharedSize: (int) 0
      },
      RPS: (ratelimit.Zone) {
       Name: (string) "",
       Limit: (int) 0,
       Burst: (int) 0,
       SharedSize: (int) 0
      }
     },
     Redirect: (rewrite.Redirect) {
      Target: (string) "",
      AddBaseURL: (bool) false,
      SSLRedirect: (bool) false
     },
     Whitelist: (ipwhitelist.SourceRange) {
      CIDR: ([]string) <nil>
     },
     Proxy: (proxy.Configuration) {
      BodySize: (string) "",
      ConnectTimeout: (int) 0,
      SendTimeout: (int) 0,
      ReadTimeout: (int) 0,
      BufferSize: (string) ""
     },
     CertificateAuth: (resolver.AuthSSLCert) {
      Secret: (string) "",
      CertFileName: (string) "",
      KeyFileName: (string) "",
      CAFileName: (string) "",
      PemSHA: (string) ""
     },
     UsePortInRedirects: (bool) false
    })
   }
  }),
  (*ingress.Server)(0xc4202071d0)({
   Hostname: (string) (len=19) "echoserver.tmaws.io",
   SSLPassthrough: (bool) false,
   SSLCertificate: (string) "",
   SSLPemChecksum: (string) "",
   Locations: ([]*ingress.Location) (len=1 cap=1) {
    (*ingress.Location)(0xc420334540)({
     Path: (string) (len=1) "/",
     IsDefBackend: (bool) false,
     Backend: (string) (len=24) "echoserver-echoserver-80",
     BasicDigestAuth: (auth.BasicDigest) {
      Type: (string) "",
      Realm: (string) "",
      File: (string) "",
      Secured: (bool) false
     },
     Denied: (error) <nil>,
     EnableCORS: (bool) false,
     ExternalAuth: (authreq.External) {
      URL: (string) "",
      Method: (string) "",
      SendBody: (bool) false
     },
     RateLimit: (ratelimit.RateLimit) {
      Connections: (ratelimit.Zone) {
       Name: (string) "",
       Limit: (int) 0,
       Burst: (int) 0,
       SharedSize: (int) 0
      },
      RPS: (ratelimit.Zone) {
       Name: (string) "",
       Limit: (int) 0,
       Burst: (int) 0,
       SharedSize: (int) 0
      }
     },
     Redirect: (rewrite.Redirect) {
      Target: (string) "",
      AddBaseURL: (bool) false,
      SSLRedirect: (bool) false
     },
     Whitelist: (ipwhitelist.SourceRange) {
      CIDR: ([]string) <nil>
     },
     Proxy: (proxy.Configuration) {
      BodySize: (string) "",
      ConnectTimeout: (int) 0,
      SendTimeout: (int) 0,
      ReadTimeout: (int) 0,
      BufferSize: (string) ""
     },
     CertificateAuth: (resolver.AuthSSLCert) {
      Secret: (string) "",
      CertFileName: (string) "",
      KeyFileName: (string) "",
      CAFileName: (string) "",
      PemSHA: (string) ""
     },
     UsePortInRedirects: (bool) false
    })
   }
  })
 },
 TCPEndpoints: ([]*ingress.Location) {
 },
 UPDEndpoints: ([]*ingress.Location) {
 },
 PassthroughBackends: ([]*ingress.SSLPassthroughBackend) <nil>
}
